Informe de Programación: 
Evaluación final Año cero,
David Barroso Rey.

Ejercicios Generales:

2. Escriba un programa en C# que compute la suma de los dígitos de un número entero.

Análisis: Para calcular la suma de los dígitos de un número entero creé la variable total que guarda la suma de cada uno de sus dígitos. Sumé cada dígito de “n” a la derecha, es decir, n%10 y cada vez que lo sumaba dividía ese n entre 10 porque ese último digito el programa ya lo sumó.
5. Escriba un programa en C# para rotar un array de enteros n espacios hacia la izquierda.

Análisis: para reducir el costo de este algoritmo escribí un ciclo que implemente que mientras la cantidad de giros sea mayor que el tamaño del array se reste la cantidad de giros menos el tamaño del array porque si los giros son igual al tamaño del array, este gira hasta caer en la posición inicial. Posteriormente, se copian los elementos de “a” hacia “temp” según la cantidad de giros resultantes que va a ser siempre menor que la longitud del array o cero. En el caso de que se giren “n” veces y la cantidad de giros sea menor que 0, o sea se salga de los índices del array, la posición será igual al tamaño del array más la posición inicial menos la cantidad de giros, al obtener así la posición correcta. En el otro caso(>=0), solo se resta la posición inicial menos la cantidad de giros.  


9. Escriba un programa en C# para imprimir los n primeros términos de la serie
armónica y su suma.
1 + 1/2 + 1/3 + 1/4 + 1/5 ... 1/n términos

Análisis: Para esta solución se declara una variable T=1 debido a que es el primer término de la serie armónica. Luego, se guardan los valores de dicha serie en una variable total, o sea su suma hasta el n-ésimo término.

11. Escriba un programa en C# para imprimir un patrón en forma de diamante (n
impar).
Análisis: se crea la variable “s” para controlar los espacios en blanco antes del primer “*”, buscando que la mitad del diamante (donde es más ancho) no existan espacios en blanco y que en cada una de sus puntas sea n/2, el string c sería quien representa dichos espacios en blanco en dependencia de la variable s. La variable d comienza inicializada en uno porque la primera línea siempre será un “*” y luego crece hasta llegar al valor de n (la mitad del diamante) y decrece hasta llegar a un “*”.
Ejercicios recursividad:
7. Un número puede no ser palíndromo, pero su descendiente sí. El hijo directo de un número es creado al sumar cada par de dígitos adyacentes. Por ejemplo,
123312 no es palíndromo, pero su próximo hijo, 363, sí. Escriba un programa en C# que devuelva True si el número o cualquiera de sus descendientes hasta los dos dígitos es palíndromo.

Análisis: Para su solución implemente un método adicional llamado PalindromeN que me dice si el número “n” es palíndromo. Mi caso de parada sería si “n” es palíndromo. De “n” no serlo se halla su descendiente “d” y se llama recursivamente donde “d” será el nuevo n. Creé el string s en el que convierto “n” a un string para que me diga su cantidad de cifras, si esta cantidad es impar (n%2!=0) se comprueba directamente si “n” es palíndromo y se retorna ese valor de verdad al “n” no tener más descendientes.

4. Escriba un programa en C# para generar todas las posibles permutaciones de un
array de enteros de manera recursiva.
Análisis: Para esta solución se imprime cada una de las permutaciones generadas. La variable “v” controla los índices del array resultante y si es igual al tamaño del array entonces ha ocurrido una permutación (todos los elementos de “used” están en true). Después de completar una permutación, los elementos de “used” en el valor de “v” en dicha llamada recursiva, se ponen en false y  luego el valor de “k” se aumenta para generar el resto de sus permutaciones. El caso de parada sería cuando “k” es mayor que el tamaño del array y “v” está en la posición inicial del array porque no hay una llamada recursiva a donde volver.
